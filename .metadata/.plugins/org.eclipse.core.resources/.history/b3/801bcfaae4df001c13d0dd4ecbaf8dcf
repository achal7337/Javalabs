import java.util.Arrays;

/**
 * @author Andriy Pavlovych
 * The class is meant to illustrate a couple of image-processing algorithms:
 * Gaussian blurring and simple edge detection
 */
public class ImageFilter{
	//TODO prevent object creation, as this is a utility class
	
	/**
	 * Method implements Gaussian blurring
	 * @param imageData array of image pixels
	 * @param width image width
	 * @param sigma parameter of the Gaussian distribution
	 */
	public static void blur (int[] imageData, int width, double sigma){
		//TODO your task is to replace this stub code with the proper implementation of the method
		//create a temporary array to store the result
		final int MAX_KERNEL_SIZE = 15;
		double kernel [] = new double [MAX_KERNEL_SIZE];
		double kernelSum = 0;
		int height = imageData.length/width;
		for (int i = 0; i <= MAX_KERNEL_SIZE / 2 ; i++){
			kernel[MAX_KERNEL_SIZE / 2 + i] = Math.exp(-0.5 * ((Math.pow(i, 2) / (Math.pow(sigma, 2)))));
			kernel[MAX_KERNEL_SIZE / 2 - i] = Math.exp(-0.5 * ((Math.pow(i, 2) / (Math.pow(sigma, 2)))));
		}
		
		for (int i = 0; i < MAX_KERNEL_SIZE; i++) kernelSum += kernel [i]; //compute the sum
		for (int i = 0; i < MAX_KERNEL_SIZE; i++) kernel [i] /= kernelSum; //normalize by that sum
		System.out.println(Arrays.toString(kernel));
		
		
		int [] resultImageData = new int[imageData.length]; //TODO NO, it should not be null!
		for (int i=0; i<height ;i++) {
			for (int j = 0; j < width; j++) {
					int red = 0;
					int green = 0;
					int blue = 0;
					for (int k = 0; k < kernel.length; k++) {
						int col = j + k - kernel.length / 2;
						if (col < 0) {
							col = 0;
						}
						if (col >= width) {
							col = width - 1;
						}

						int imageIndex = i * width + col;
						red = (int) (kernel[k] * ((imageData[imageIndex] & 0x00FF0000) >> 16));
						green = (int) (kernel[k] * ((imageData[imageIndex] & 0x0000FF00) >> 8));
						blue = (int) (kernel[k] * ((imageData[imageIndex] & 0x000000FF)));
						resultImageData[i * width + j] += red << 16 | green << 8 | blue;
					}
					
		}
			
		}
		System.arraycopy(resultImageData, 0, imageData, 0, imageData.length);
		//TODO apply convolution in one dimension

		//TODO repeat for the other dimension
		 resultImageData = new int[imageData.length]; //TODO NO, it should not be null!
		 for (int l = 0; l < width; l++) {
				for (int j = 0; j < height; j++) {
					int red = 0;
					int green = 0;
					int blue = 0;

					for (int k = 0; k < kernel.length; k++) {
						int row = j + k - kernel.length / 2;
						if (row < 0) {
							row = 0;
						}
						if (row >= height) {
							row = height - 1;
						}

						int imageIndex = row * width + l;
						red = (int) (kernel[k] * ((imageData[imageIndex] & 0x00FF0000) >> 16));
						green = (int) (kernel[k] * ((imageData[imageIndex] & 0x0000FF00) >> 8));
						blue = (int) (kernel[k] * ((imageData[imageIndex] & 0x000000FF)));
						resultImageData[j * width + l] += red << 16 | green << 8 | blue;
					}
				}
			}
			System.arraycopy(resultImageData, 0, imageData, 0, imageData.length);
		//TODO store the result back in the original imageData array
		//one way to store the result back 
		//System.arraycopy(resultImageData, 0, imageData, 0, imageData.length);
	}

	/**
	 * Method implements simple edge detection
	 * @param imageData imageData array of image pixels
	 * @param width image width
	 */
	public static void edgeDetection(int[] imageData, int width) {
		//TODO your task is to replace this stub code with the proper implementation of the method 
		//The code below merely demonstrates how to extract RGB pixel values from the image and how to write them them back
		int height = imageData.length / width;
		float[][] matrixKernal = { { -1, -1, -1 }, { -1, 4, -1 }, { -1, -1, -1 } };
		int[] result = new int[imageData.length];

		for (int i = 0; i < height; i++) {
			for (int j = 0; j < width; j++) {
				int red = 0;
				int green = 0;
				int blue = 0;

				for (int k = 0; k < matrixKernal.length; k++) {
					for (int l = 0; l < matrixKernal.length; l++) {
						int row = i + k - matrixKernal.length / 2;
						if (row < 0) {
							row = 0;
						}
						if (row >= height) {
							row = height - 1;
						}

						int col = j + l - matrixKernal.length / 2;
						if (col < 0) {
							col = 0;
						} else if (col >= width) {
							col = width - 1;
						}

						int imageIndex = row * width + col;
						red += (int) (matrixKernal[k][l] * ((imageData[imageIndex] & 0x00FF0000) >> 16));
						green += (int) (matrixKernal[k][l] * ((imageData[imageIndex] & 0x0000FF00) >> 8));
						blue += (int) (matrixKernal[k][l] * ((imageData[imageIndex] & 0x000000FF)));
					}
				}

				if (red < 0) {
					red = 0;
				}
				if (green < 0) {
					green = 0;
				}
				if (blue < 0) {
					blue = 0;
				}
				if (red > 255) {
					red = 255;
				}
				if (green > 255) {
					green = 255;
				}
				if (blue > 255) {
					blue = 255;
				}
				
				result[i * width + j] += red << 16 | green << 8 | blue;
			}
		}
		System.arraycopy(result, 0, imageData, 0, imageData.length);
	}


}
